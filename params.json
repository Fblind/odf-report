{"name":"Odf-report","tagline":"Generates ODF files, given a template (.odt) and data, replacing tags","body":"## NEW!\r\n\r\n* as per popular request, now uses rubyzip ~> 1.1.0\r\n* uses `Zip::OutputStream.write_buffer` to generate the file. This should avoid corruption issues.\r\n* the `.generate` method now returns the actual report binary, so you can send_data it directly\r\n* you can also use `.generate('file.odt')`, which saves the report to the specified file\r\n\r\n***\r\n\r\n## INSTALL\r\nin your Gemfile\r\n```ruby\r\ngem \"odf-report\"\r\n```\r\n\r\nor at the terminal prompt\r\n```bash\r\n$ (sudo) gem install odf-report\r\n```\r\n## USAGE\r\n\r\n### Step 1  --  the template\r\n\r\nFirst of all, you need to create a .odt file to serve as a template\r\n\r\nTemplates are normal .odt files with placeholders for Substitutions\r\n\r\nThere are now *four* kinds of substitutions available: \r\n* fields\r\n* tables\r\n* images\r\n* sections\r\n\r\n### Fields placeholders\r\n\r\nIt's just an upcase sentence, surrounded by brackets. It will be replaced for wathever value you supply.\r\n\r\nIn the folowing example:\r\n\r\n```ruby\r\nreport = ODFReport::Report.new(\"Users/john/my_template.odt\") do |r|\r\n\r\n  r.add_field :user_name, @user.name\r\n  r.add_field :address, \"My new address\"\r\n\r\nend\r\n```\r\n\r\nAll occurences of **[USER_NAME]** found in the file will be replaced by the value of **@user.name** whereas all **[ADDRESS]** 'es will contains **My new address**\r\n\r\nIt's as simple as that.\r\n\r\n\r\n### Table placeholders\r\n\r\nTo use table placeholders, you should create a Table in your document and give it a name. In OpenOffice, it's just a matter of right-clicking the table you just created, choose _Table Properties..._ and type a name in the Name field.\r\n\r\nIf you inform **:header=>true**, the first row will be treated as a *header* and left untouched. The remaining rows will be used as the template for the table. If you have more than one template row, they will be cycled. This is usefull for making zebra tables.\r\n\r\nAs with Field placeholders, just insert a **[FIELD_NAME]** in each cell and let the magic takes place.\r\n\r\nTaking the folowing example:\r\n\r\n```ruby\r\nreport = ODFReport::Report.new(\"Users/john/my_template.odt\") do |r|\r\n\r\n  r.add_field \"USER_NAME\", @user.nome\r\n  r.add_field \"ADDRESS\", @user.address\r\n\r\n  r.add_table(\"TABLE_1\", @list_of_itens, :header=>true) do |t|\r\n    t.add_column(:item_id, :id)\r\n    t.add_column(:description) do { |item| \"==> #{item.description}\" }\r\n  end\r\n\r\nend\r\n```\r\n\r\nand considering you have a table like this in your template\r\n\r\n```\r\n---------------------------------\r\n|  [ITEM_ID]  |  [DESCRIPTION]  |\r\n---------------------------------\r\n\r\n* this is my lame attempt to draw a table.\r\n  you don't suppose to type this.\r\n  you have to use an actual table.\r\n  i don't know... just thought I'd mention it ;-)\r\n```\r\n\r\nand a collection **@list_of_itens**, it will be created one row for each item in the collection, and the replacement will take place accordingly.\r\n\r\nAny format applied to the fields in the template will be preserved.\r\n\r\n\r\n### Images\r\n\r\nYou must put a mock image in your odt template and give it a name. That name will be used to replace the mock image for the actual image.\r\nYou can also assign any properties you want to the mock image and they will be kept once the image is replaced.\r\n\r\nAn image replace would look like this:\r\n\r\n```ruby\r\nreport = ODFReport::Report.new(\"Users/john/my_template.odt\") do |r|\r\n\r\n  r.add_image :graphics1, \"/path/to/the/image.jpg\"\r\n\r\nend\r\n```\r\n\r\n\r\n### Sections\r\n\r\nSometimes, you have to repeat a whole chunk of a document, in a structure a lot more complex than a table. Now you can make a Section in your template and use it in this situations. Creating a Section in OpenOffice is as easy as select menu *Insert* and then *Section...*, and then choose a name for it.\r\n\r\n*Section* 's are lot like Tables, in the sense that you can pass a collection and have that section repeated for each member of the collection. *But*, Sections can have anything inside it, even Tables *and nested Sections*, as long as you pass the appropriate data structure.\r\n\r\nLet's see an example:\r\n\r\n```ruby\r\n  @invoices = Invoice.find(:all)\r\n\r\n  report = ODFReport::Report.new(\"reports/invoice.odt\") do |r|\r\n\r\n    r.add_field(:title, \"INVOICES REPORT\")\r\n    r.add_field(:date, Date.today)\r\n\r\n    r.add_section(\"SC_INVOICE\", @invoices) do |s|\r\n\r\n      s.add_field(:number) { |invoice| invoice.number.to_s.rjust(5, '0') }\r\n      s.add_field(:name,    :customer_name)\r\n      s.add_field(:address, :customer_address)\r\n\r\n      s.add_table(\"TB_ITEMS\", :items, :header => true) do |t|\r\n        t.add_column(:id)\r\n        t.add_column(:product) {|item| item.product.name }\r\n        t.add_column(:value, :product_value)\r\n      end\r\n\r\n      s.add_field(:total) do |invoice|\r\n        if invoice.status == 'CLOSED'\r\n          invoice.total\r\n        else\r\n          invoice.items.sum('product_value')}\r\n        end\r\n      end\r\n\r\n      s.add_section(\"SUB_NOTES\", :notes) do |s1|\r\n\r\n        s1.add_field(:note_title) { |n| n.title }\r\n\r\n        s1.add_table ...\r\n\r\n      end\r\n\r\n    end\r\n\r\n  end\r\n```\r\n\r\nNote that when you add a Table to a Section, you don't pass the collection itself, but the attribute of the item of that section that's gonna return the collection for that particular Table. Sounds complicated, huh? But once you get it, it's quite straightforward.\r\n\r\nIn the above example, `s.add_table(\"TB_ITEMS\", :items, :header => true) do |t|`, the `:items` thing refers to a `invoice.items`. Easy, right?\r\n\r\n***\r\n\r\n### Step 2  --  generating the document\r\n\r\nIt's fairly simple to generate the document. You can use this inside a Rails application or in a standalone script.\r\n\r\n#### Generating a document in a Rails application\r\n\r\nIn a controller, you can have a code like this:\r\n\r\n```ruby\r\ndef print\r\n\r\n  @ticket = Ticket.find(params[:id])\r\n\r\n  report = ODFReport::Report.new(Rails.root.join('app', 'reports', 'ticket.odt') do |r|\r\n\r\n    r.add_field(:id,         @ticket.id.to_s)\r\n    r.add_field(:created_by, @ticket.created_by)\r\n    r.add_field(:created_at, @ticket.created_at.strftime(\"%d/%m/%Y - %H:%M\"))\r\n    r.add_field(:type,       @ticket.type.name)\r\n    r.add_field(:status,     @ticket.status_text)\r\n    r.add_field(:date,       Time.now.strftime(\"%d/%m/%Y - %H:%M\"))\r\n    r.add_field(:solution,   (@ticket.solution || ''))\r\n\r\n    r.add_table(\"OPERATORS\", @ticket.operators) do |t|\r\n      t.add_column(:operator_name) { |op| \"#{op.name} (#{op.department.short_name})\" }\r\n    end\r\n\r\n    r.add_table(\"FIELDS\", @ticket.fields) do |t|\r\n      t.add_column(:field_name, :name)\r\n      t.add_column(:field_value) { |field| field.text_value || \"Empty\" }\r\n    end\r\n\r\n  end\r\n\r\n  send_data report.generate, \r\n             type: 'application/vnd.oasis.opendocument.text',\r\n             disposition: 'attachment',\r\n             filename: 'report.odt'\r\n\r\nend\r\n```\r\n\r\n#### Generating a document in a standalone script\r\n\r\nIt's just the same as in a Rails app, but you can inform the filename where the document will be saved.\r\n```ruby\r\nreport = ODFReport::Report.new(\"ticket.odt\") do |r|\r\n\r\n... populates the report ...\r\n\r\nend\r\n\r\nreport.generate(\"./documents/ticket.odt\")\r\n```\r\n\r\n***\r\n\r\n### REQUIREMENTS\r\n\r\n* *rubyzip*: for manipulating the contents of the odt file, since it's actually a zip file.\r\n* *nokogiri*: for parsing and manipulating the document xml files.\r\n","google":"UA-35945147-1","note":"Don't delete this file! It's used internally to help with page regeneration."}